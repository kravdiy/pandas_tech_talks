{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "Pandas is a fast, powerful, flexible and easy to use open source data analysis and manipulation tool,\n",
    "built on top of the Python programming language. At least it desighened to be fast :-)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import csv\n",
    "import dask.dataframe as dd\n",
    "import datetime\n",
    "import functools\n",
    "import gc\n",
    "import itertools\n",
    "import sys\n",
    "from timeit import default_timer as _timer\n",
    "import pprint\n",
    "import cProfile\n",
    "import pstats\n",
    "import numpy as np\n",
    "from functools import reduce\n",
    "import pandas_profiling\n",
    "\n",
    "calendar = 'data/calendar_summary.csv'\n",
    "listings = 'data/listings.csv'\n",
    "listings_s = 'data/listings_summary.csv'\n",
    "hood = 'data/neighbourhoods.csv'\n",
    "reviews = 'data/reviews.csv'\n",
    "reviews_s = 'data/reviews_summary.csv'\n",
    "path_list = [calendar, listings, listings_s, hood, reviews, reviews_s]\n",
    "\n",
    "demand = 'data/demand_profile.csv'\n",
    "output = 'output/profile.html'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Utils"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def timeit(_func=None, *, repeat=3, number=1000, file=sys.stdout):\n",
    "    _repeat = functools.partial(itertools.repeat, None)\n",
    "\n",
    "    def wrap(func):\n",
    "        @functools.wraps(func)\n",
    "        def _timeit(*args, **kwargs):\n",
    "            gcold = gc.isenabled()\n",
    "            gc.disable()\n",
    "\n",
    "            try:\n",
    "                trials = []\n",
    "                for _ in _repeat(repeat):\n",
    "                    total = 0\n",
    "                    for _ in _repeat(number):\n",
    "                        start = _timer()\n",
    "                        result = func(*args, **kwargs)\n",
    "                        end = _timer()\n",
    "                        total += end - start\n",
    "                    trials.append(total)\n",
    "\n",
    "                best = min(trials) / number\n",
    "                print(\n",
    "                    \"Function `{}` ran in average\"\n",
    "                    \" of {:0.6f} seconds.\".format(func.__name__, best),\n",
    "                    end=\"\\n\\n\",\n",
    "                    file=file,\n",
    "                )\n",
    "            finally:\n",
    "                if gcold:\n",
    "                    gc.enable()\n",
    "            return result\n",
    "\n",
    "        return _timeit\n",
    "\n",
    "    if _func is None:\n",
    "        return wrap\n",
    "    else:\n",
    "        return wrap(_func)\n",
    "    \n",
    "    \n",
    "def mem_usage(pandas_obj):\n",
    "    if isinstance(pandas_obj,pd.DataFrame):\n",
    "        usage_b = pandas_obj.memory_usage(deep=True).sum()\n",
    "    else: \n",
    "        usage_b = pandas_obj.memory_usage(deep=True)\n",
    "    usage_mb = usage_b / 1024 ** 2\n",
    "    return \"{:03.2f} MB\".format(usage_mb)\n",
    "\n",
    "\n",
    "def create_test_df():\n",
    "    return pd.DataFrame({\n",
    "    'A' : ['spam', 'eggs', 'spam', 'eggs'] * 6,\n",
    "    'B' : ['alpha', 'beta', 'gamma'] * 8,\n",
    "    'C' : [np.random.choice(pd.date_range(datetime.datetime(2020,1,1),datetime.datetime(2020,1,3))) for i in range(24)],\n",
    "    'D' : np.random.randn(24),\n",
    "    'E' : np.random.randint(2,10,24),\n",
    "    'F' : [np.random.choice(['rand_1', 'rand_2', 'rand_4', 'rand_6']) for i in range(24)],})\n",
    "\n",
    "\n",
    "def statistic_exploration(df):\n",
    "    \n",
    "    print('The data has {} Rows and {} columns'.format(df.shape[0], df.shape[1]))\n",
    "    \n",
    "    col_list = ['Null','Unique_Count','Count_all', 'Data_type', 'Missing_%', \n",
    "                'Max/Min','Mean', 'Median',\n",
    "                'Variance', 'Kurtosis', 'Std', 'Skewness']\n",
    "    \n",
    "    df_stat = pd.DataFrame(index=df.columns, columns=col_list)\n",
    "    df_stat['Null'] = list([len(df[col][df[col].isnull()]) for i, col in enumerate(df.columns)])\n",
    "    df_stat['Unique_Count'] = list([len(df[col].unique()) for i, col in enumerate(df.columns)])\n",
    "    df_stat['Count_all'] = list([df[col].count() for i, col in enumerate(df.columns)])\n",
    "    df_stat['Data_type'] = list([df[col].dtype for i, col in enumerate(df.columns)])\n",
    "    df_stat['Missing_%'] = list([abs(100 - ((len(df[col].isnull())*100)/df[col].count()))\n",
    "                                 for i, col in enumerate(df.columns)])\n",
    "    \n",
    "    for i,col in enumerate(df.columns):\n",
    "        if 'float' in str(df[col].dtype) or 'int' in str(df[col].dtype):\n",
    "            \n",
    "            df_stat.at[col,'Max/Min'] = str(round(df[col].max(),2)) + '/' + str(round(df[col].min(),2))\n",
    "            df_stat.at[col,'Mean'] = df[col].mean()\n",
    "            df_stat.at[col,'Median'] = df[col].median()\n",
    "            df_stat.at[col,'Variance'] = df[col].var()\n",
    "            df_stat.at[col,'Kurtosis'] = df[col].kurt()\n",
    "            df_stat.at[col,'Std'] = df[col].std()\n",
    "            df_stat.at[col,'Skewness'] = df[col].skew()\n",
    "            \n",
    "    print(df.dtypes.value_counts())\n",
    "    print('Data sample:')\n",
    "    print(df.sample(1).T)\n",
    "    return (df_stat.fillna('---'))\n",
    "\n",
    "\n",
    "def profile_dec(func):\n",
    "    \"\"\"Decorator for run function profile\"\"\"\n",
    "    def wrapper(*args, **kwargs):\n",
    "        profile_filename = func.__name__ + '.prof'\n",
    "        profiler = cProfile.Profile()\n",
    "        result = profiler.runcall(func, *args, **kwargs)\n",
    "        profiler.dump_stats(profile_filename)\n",
    "        p = pstats.Stats(profile_filename)\n",
    "        p.sort_stats('cumtime').print_stats()\n",
    "        return result\n",
    "   \n",
    "    return wrapper\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Dataset upload"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Function `c_read` ran in average of 0.291502 seconds.\n",
      "\n",
      "Function `p_read` ran in average of 0.736047 seconds.\n",
      "\n",
      "Function `d_read` ran in average of 0.271633 seconds.\n",
      "\n",
      "Function `d_read_low_mem` ran in average of 0.193232 seconds.\n",
      "\n",
      "Function `chunk_read` ran in average of 0.201904 seconds.\n",
      "\n",
      "Function `dict_read` ran in average of 0.001178 seconds.\n",
      "\n",
      "Function `dask_read` ran in average of 0.193135 seconds.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "@timeit(repeat=10, number=10)\n",
    "def c_read(path):\n",
    "    return pd.read_csv(path, engine='c')\n",
    "\n",
    "\n",
    "@timeit(repeat=10, number=10)\n",
    "def p_read(path):\n",
    "    return pd.read_csv(path, engine='python')\n",
    "\n",
    "\n",
    "@timeit(repeat=10, number=10)\n",
    "def d_read(path):\n",
    "    return pd.read_csv(path)\n",
    "\n",
    "\n",
    "@timeit(repeat=10, number=10)\n",
    "def d_read_low_mem(path):\n",
    "    return pd.read_csv(path, low_memory=True)\n",
    "\n",
    "\n",
    "#Will not crash memory stack\n",
    "@timeit(repeat=10, number=10)\n",
    "def chunk_read(path):\n",
    "    chunks = pd.read_csv(path, chunksize=10**5)\n",
    "    data = pd.concat(chunks)\n",
    "    return data\n",
    "\n",
    "\n",
    "@timeit(repeat=10, number=10)\n",
    "def dict_read(path):\n",
    "    return csv.DictReader(open(path))\n",
    "\n",
    "\n",
    "@timeit(repeat=10, number=10)\n",
    "def dask_read(path):\n",
    "    return dd.read_csv(path, sample=10000000)\n",
    "\n",
    "\n",
    "def check_all(path):\n",
    "    c_read(path)\n",
    "    p_read(path)\n",
    "    d_read(path)\n",
    "    d_read_low_mem(path)\n",
    "    chunk_read(path)\n",
    "    dict_read(path)\n",
    "    dask_read(path)\n",
    "    \n",
    "    \n",
    "#for p in path_list:\n",
    "#    check_all(p)\n",
    "\n",
    "check_all(listings)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "The DictReader is a Python class which maps the data read as a dictionary, whose keys, unless specified are the first row of the CSV. All values in the subsequent rows will be dictionary values and can be accessed with the respective dictionary key. However, these values will be imported as strings. This method very useful for data analysis tasks, but it is valuable in certain other cases (working with the JSON format)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tokenization took: 35.01 ms\n",
      "Type conversion took: 45.75 ms\n",
      "Parser memory cleanup took: 0.01 ms\n"
     ]
    }
   ],
   "source": [
    "listings_df = pd.read_csv(listings, verbose=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 22552 entries, 0 to 22551\n",
      "Data columns (total 16 columns):\n",
      " #   Column                          Non-Null Count  Dtype  \n",
      "---  ------                          --------------  -----  \n",
      " 0   id                              22552 non-null  int64  \n",
      " 1   name                            22493 non-null  object \n",
      " 2   host_id                         22552 non-null  int64  \n",
      " 3   host_name                       22526 non-null  object \n",
      " 4   neighbourhood_group             22552 non-null  object \n",
      " 5   neighbourhood                   22552 non-null  object \n",
      " 6   latitude                        22552 non-null  float64\n",
      " 7   longitude                       22552 non-null  float64\n",
      " 8   room_type                       22552 non-null  object \n",
      " 9   price                           22552 non-null  int64  \n",
      " 10  minimum_nights                  22552 non-null  int64  \n",
      " 11  number_of_reviews               22552 non-null  int64  \n",
      " 12  last_review                     18644 non-null  object \n",
      " 13  reviews_per_month               18638 non-null  float64\n",
      " 14  calculated_host_listings_count  22552 non-null  int64  \n",
      " 15  availability_365                22552 non-null  int64  \n",
      "dtypes: float64(3), int64(7), object(6)\n",
      "memory usage: 11.5 MB\n"
     ]
    }
   ],
   "source": [
    "listings_df.info(memory_usage='deep')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The data has 22552 Rows and 16 columns\n",
      "int64      7\n",
      "object     6\n",
      "float64    3\n",
      "dtype: int64\n",
      "Data sample:\n",
      "                                            21826\n",
      "id                                       29022524\n",
      "name                            Gorki Penthouse 1\n",
      "host_id                                  42671030\n",
      "host_name                        Gorki Apartments\n",
      "neighbourhood_group                         Mitte\n",
      "neighbourhood                     Brunnenstr. Süd\n",
      "latitude                                  52.5304\n",
      "longitude                                 13.4028\n",
      "room_type                         Entire home/apt\n",
      "price                                        1000\n",
      "minimum_nights                                  1\n",
      "number_of_reviews                               0\n",
      "last_review                                   NaN\n",
      "reviews_per_month                             NaN\n",
      "calculated_host_listings_count                  6\n",
      "availability_365                              199\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Null</th>\n",
       "      <th>Unique_Count</th>\n",
       "      <th>Count_all</th>\n",
       "      <th>Data_type</th>\n",
       "      <th>Missing_%</th>\n",
       "      <th>Max/Min</th>\n",
       "      <th>Mean</th>\n",
       "      <th>Median</th>\n",
       "      <th>Variance</th>\n",
       "      <th>Kurtosis</th>\n",
       "      <th>Std</th>\n",
       "      <th>Skewness</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>id</th>\n",
       "      <td>0</td>\n",
       "      <td>22552</td>\n",
       "      <td>22552</td>\n",
       "      <td>int64</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>29867352/2015</td>\n",
       "      <td>1.57156e+07</td>\n",
       "      <td>1.68664e+07</td>\n",
       "      <td>7.31379e+13</td>\n",
       "      <td>-1.144</td>\n",
       "      <td>8.55207e+06</td>\n",
       "      <td>-0.179928</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>name</th>\n",
       "      <td>59</td>\n",
       "      <td>21874</td>\n",
       "      <td>22493</td>\n",
       "      <td>object</td>\n",
       "      <td>0.262304</td>\n",
       "      <td>---</td>\n",
       "      <td>---</td>\n",
       "      <td>---</td>\n",
       "      <td>---</td>\n",
       "      <td>---</td>\n",
       "      <td>---</td>\n",
       "      <td>---</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>host_id</th>\n",
       "      <td>0</td>\n",
       "      <td>19180</td>\n",
       "      <td>22552</td>\n",
       "      <td>int64</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>224508134/2217</td>\n",
       "      <td>5.40335e+07</td>\n",
       "      <td>3.12671e+07</td>\n",
       "      <td>3.38292e+15</td>\n",
       "      <td>0.56104</td>\n",
       "      <td>5.81629e+07</td>\n",
       "      <td>1.26562</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>host_name</th>\n",
       "      <td>26</td>\n",
       "      <td>5998</td>\n",
       "      <td>22526</td>\n",
       "      <td>object</td>\n",
       "      <td>0.115422</td>\n",
       "      <td>---</td>\n",
       "      <td>---</td>\n",
       "      <td>---</td>\n",
       "      <td>---</td>\n",
       "      <td>---</td>\n",
       "      <td>---</td>\n",
       "      <td>---</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>neighbourhood_group</th>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>22552</td>\n",
       "      <td>object</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>---</td>\n",
       "      <td>---</td>\n",
       "      <td>---</td>\n",
       "      <td>---</td>\n",
       "      <td>---</td>\n",
       "      <td>---</td>\n",
       "      <td>---</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>neighbourhood</th>\n",
       "      <td>0</td>\n",
       "      <td>136</td>\n",
       "      <td>22552</td>\n",
       "      <td>object</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>---</td>\n",
       "      <td>---</td>\n",
       "      <td>---</td>\n",
       "      <td>---</td>\n",
       "      <td>---</td>\n",
       "      <td>---</td>\n",
       "      <td>---</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>latitude</th>\n",
       "      <td>0</td>\n",
       "      <td>22552</td>\n",
       "      <td>22552</td>\n",
       "      <td>float64</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>52.65/52.35</td>\n",
       "      <td>52.5098</td>\n",
       "      <td>52.5091</td>\n",
       "      <td>0.000950209</td>\n",
       "      <td>0.758927</td>\n",
       "      <td>0.0308255</td>\n",
       "      <td>-0.133515</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>longitude</th>\n",
       "      <td>0</td>\n",
       "      <td>22552</td>\n",
       "      <td>22552</td>\n",
       "      <td>float64</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>13.76/13.1</td>\n",
       "      <td>13.4061</td>\n",
       "      <td>13.4168</td>\n",
       "      <td>0.00335979</td>\n",
       "      <td>2.96943</td>\n",
       "      <td>0.0579637</td>\n",
       "      <td>-0.25517</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>room_type</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>22552</td>\n",
       "      <td>object</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>---</td>\n",
       "      <td>---</td>\n",
       "      <td>---</td>\n",
       "      <td>---</td>\n",
       "      <td>---</td>\n",
       "      <td>---</td>\n",
       "      <td>---</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>price</th>\n",
       "      <td>0</td>\n",
       "      <td>295</td>\n",
       "      <td>22552</td>\n",
       "      <td>int64</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>9000/0</td>\n",
       "      <td>67.1437</td>\n",
       "      <td>45</td>\n",
       "      <td>48517.2</td>\n",
       "      <td>791.146</td>\n",
       "      <td>220.266</td>\n",
       "      <td>26.7332</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>minimum_nights</th>\n",
       "      <td>0</td>\n",
       "      <td>102</td>\n",
       "      <td>22552</td>\n",
       "      <td>int64</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>5000/1</td>\n",
       "      <td>7.15706</td>\n",
       "      <td>2</td>\n",
       "      <td>1653.65</td>\n",
       "      <td>10154.6</td>\n",
       "      <td>40.6651</td>\n",
       "      <td>85.888</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>number_of_reviews</th>\n",
       "      <td>0</td>\n",
       "      <td>306</td>\n",
       "      <td>22552</td>\n",
       "      <td>int64</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>498/0</td>\n",
       "      <td>17.8407</td>\n",
       "      <td>5</td>\n",
       "      <td>1352.01</td>\n",
       "      <td>26.6259</td>\n",
       "      <td>36.7696</td>\n",
       "      <td>4.38296</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>last_review</th>\n",
       "      <td>3908</td>\n",
       "      <td>1313</td>\n",
       "      <td>18644</td>\n",
       "      <td>object</td>\n",
       "      <td>20.961167</td>\n",
       "      <td>---</td>\n",
       "      <td>---</td>\n",
       "      <td>---</td>\n",
       "      <td>---</td>\n",
       "      <td>---</td>\n",
       "      <td>---</td>\n",
       "      <td>---</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>reviews_per_month</th>\n",
       "      <td>3914</td>\n",
       "      <td>769</td>\n",
       "      <td>18638</td>\n",
       "      <td>float64</td>\n",
       "      <td>21.000107</td>\n",
       "      <td>36.67/0.01</td>\n",
       "      <td>1.13553</td>\n",
       "      <td>0.54</td>\n",
       "      <td>2.2713</td>\n",
       "      <td>34.3418</td>\n",
       "      <td>1.50708</td>\n",
       "      <td>3.39166</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>calculated_host_listings_count</th>\n",
       "      <td>0</td>\n",
       "      <td>23</td>\n",
       "      <td>22552</td>\n",
       "      <td>int64</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>45/1</td>\n",
       "      <td>1.91823</td>\n",
       "      <td>1</td>\n",
       "      <td>13.4488</td>\n",
       "      <td>75.7204</td>\n",
       "      <td>3.66726</td>\n",
       "      <td>7.86513</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>availability_365</th>\n",
       "      <td>0</td>\n",
       "      <td>366</td>\n",
       "      <td>22552</td>\n",
       "      <td>int64</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>365/0</td>\n",
       "      <td>79.8528</td>\n",
       "      <td>4</td>\n",
       "      <td>14248.8</td>\n",
       "      <td>0.109892</td>\n",
       "      <td>119.368</td>\n",
       "      <td>1.29135</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                Null  Unique_Count  Count_all Data_type  \\\n",
       "id                                 0         22552      22552     int64   \n",
       "name                              59         21874      22493    object   \n",
       "host_id                            0         19180      22552     int64   \n",
       "host_name                         26          5998      22526    object   \n",
       "neighbourhood_group                0            12      22552    object   \n",
       "neighbourhood                      0           136      22552    object   \n",
       "latitude                           0         22552      22552   float64   \n",
       "longitude                          0         22552      22552   float64   \n",
       "room_type                          0             3      22552    object   \n",
       "price                              0           295      22552     int64   \n",
       "minimum_nights                     0           102      22552     int64   \n",
       "number_of_reviews                  0           306      22552     int64   \n",
       "last_review                     3908          1313      18644    object   \n",
       "reviews_per_month               3914           769      18638   float64   \n",
       "calculated_host_listings_count     0            23      22552     int64   \n",
       "availability_365                   0           366      22552     int64   \n",
       "\n",
       "                                Missing_%         Max/Min         Mean  \\\n",
       "id                               0.000000   29867352/2015  1.57156e+07   \n",
       "name                             0.262304             ---          ---   \n",
       "host_id                          0.000000  224508134/2217  5.40335e+07   \n",
       "host_name                        0.115422             ---          ---   \n",
       "neighbourhood_group              0.000000             ---          ---   \n",
       "neighbourhood                    0.000000             ---          ---   \n",
       "latitude                         0.000000     52.65/52.35      52.5098   \n",
       "longitude                        0.000000      13.76/13.1      13.4061   \n",
       "room_type                        0.000000             ---          ---   \n",
       "price                            0.000000          9000/0      67.1437   \n",
       "minimum_nights                   0.000000          5000/1      7.15706   \n",
       "number_of_reviews                0.000000           498/0      17.8407   \n",
       "last_review                     20.961167             ---          ---   \n",
       "reviews_per_month               21.000107      36.67/0.01      1.13553   \n",
       "calculated_host_listings_count   0.000000            45/1      1.91823   \n",
       "availability_365                 0.000000           365/0      79.8528   \n",
       "\n",
       "                                     Median     Variance  Kurtosis  \\\n",
       "id                              1.68664e+07  7.31379e+13    -1.144   \n",
       "name                                    ---          ---       ---   \n",
       "host_id                         3.12671e+07  3.38292e+15   0.56104   \n",
       "host_name                               ---          ---       ---   \n",
       "neighbourhood_group                     ---          ---       ---   \n",
       "neighbourhood                           ---          ---       ---   \n",
       "latitude                            52.5091  0.000950209  0.758927   \n",
       "longitude                           13.4168   0.00335979   2.96943   \n",
       "room_type                               ---          ---       ---   \n",
       "price                                    45      48517.2   791.146   \n",
       "minimum_nights                            2      1653.65   10154.6   \n",
       "number_of_reviews                         5      1352.01   26.6259   \n",
       "last_review                             ---          ---       ---   \n",
       "reviews_per_month                      0.54       2.2713   34.3418   \n",
       "calculated_host_listings_count            1      13.4488   75.7204   \n",
       "availability_365                          4      14248.8  0.109892   \n",
       "\n",
       "                                        Std  Skewness  \n",
       "id                              8.55207e+06 -0.179928  \n",
       "name                                    ---       ---  \n",
       "host_id                         5.81629e+07   1.26562  \n",
       "host_name                               ---       ---  \n",
       "neighbourhood_group                     ---       ---  \n",
       "neighbourhood                           ---       ---  \n",
       "latitude                          0.0308255 -0.133515  \n",
       "longitude                         0.0579637  -0.25517  \n",
       "room_type                               ---       ---  \n",
       "price                               220.266   26.7332  \n",
       "minimum_nights                      40.6651    85.888  \n",
       "number_of_reviews                   36.7696   4.38296  \n",
       "last_review                             ---       ---  \n",
       "reviews_per_month                   1.50708   3.39166  \n",
       "calculated_host_listings_count      3.66726   7.86513  \n",
       "availability_365                    119.368   1.29135  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "se_df = statistic_exploration(listings_df)\n",
    "se_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Numeric optimization\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average memory usage for float columns: 0.13 MB\n",
      "Average memory usage for int columns: 0.15 MB\n",
      "Average memory usage for object columns: 1.44 MB\n"
     ]
    }
   ],
   "source": [
    "for dtype in ['float','int','object']:\n",
    "    selected_dtype = listings_df.select_dtypes(include=[dtype])\n",
    "    mean_usage_b = selected_dtype.memory_usage(deep=True).mean()\n",
    "    mean_usage_mb = mean_usage_b / 1024 ** 2\n",
    "    print(\"Average memory usage for {} columns: {:03.2f} MB\".format(dtype, mean_usage_mb))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Machine parameters for uint8\n",
      "---------------------------------------------------------------\n",
      "min = 0\n",
      "max = 255\n",
      "---------------------------------------------------------------\n",
      "\n",
      "Machine parameters for int8\n",
      "---------------------------------------------------------------\n",
      "min = -128\n",
      "max = 127\n",
      "---------------------------------------------------------------\n",
      "\n",
      "Machine parameters for int16\n",
      "---------------------------------------------------------------\n",
      "min = -32768\n",
      "max = 32767\n",
      "---------------------------------------------------------------\n",
      "\n"
     ]
    }
   ],
   "source": [
    "int_types = [\"uint8\", \"int8\", \"int16\"]\n",
    "for it in int_types:\n",
    "    print(np.iinfo(it))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "Uint 8 best choice if we do not have negative values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.20 MB\n",
      "0.37 MB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>before</th>\n",
       "      <th>after</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>uint8</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>uint16</th>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>uint32</th>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>int64</th>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        before  after\n",
       "uint8      NaN    1.0\n",
       "uint16     NaN    4.0\n",
       "uint32     NaN    2.0\n",
       "int64      7.0    NaN"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list_int = listings_df.select_dtypes(include=['int'])\n",
    "converted_int = list_int.apply(pd.to_numeric, downcast='unsigned')\n",
    "\n",
    "print(mem_usage(list_int))\n",
    "print(mem_usage(converted_int))\n",
    "\n",
    "compare_ints = pd.concat([list_int.dtypes,converted_int.dtypes],axis=1)\n",
    "compare_ints.columns = ['before','after']\n",
    "compare_ints.apply(pd.Series.value_counts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.52 MB\n",
      "0.26 MB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>before</th>\n",
       "      <th>after</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>float32</th>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>float64</th>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         before  after\n",
       "float32     NaN    3.0\n",
       "float64     3.0    NaN"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list_float = listings_df.select_dtypes(include=['float'])\n",
    "converted_float = list_float.apply(pd.to_numeric,downcast='float')\n",
    "\n",
    "print(mem_usage(list_float))\n",
    "print(mem_usage(converted_float))\n",
    "\n",
    "compare_floats = pd.concat([list_float.dtypes, converted_float.dtypes], axis=1)\n",
    "compare_floats.columns = ['before','after']\n",
    "compare_floats.apply(pd.Series.value_counts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.79 MB\n",
      "10.69 MB\n"
     ]
    }
   ],
   "source": [
    "optimized_listings = listings_df.copy()\n",
    "\n",
    "optimized_listings[converted_int.columns] = converted_int\n",
    "optimized_listings[converted_float.columns] = converted_float\n",
    "\n",
    "print(mem_usage(listings_df))\n",
    "print(mem_usage(optimized_listings))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Objects optimizations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>host_name</th>\n",
       "      <th>neighbourhood_group</th>\n",
       "      <th>neighbourhood</th>\n",
       "      <th>room_type</th>\n",
       "      <th>last_review</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>22493</td>\n",
       "      <td>22526</td>\n",
       "      <td>22552</td>\n",
       "      <td>22552</td>\n",
       "      <td>22552</td>\n",
       "      <td>18644</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>21873</td>\n",
       "      <td>5997</td>\n",
       "      <td>12</td>\n",
       "      <td>136</td>\n",
       "      <td>3</td>\n",
       "      <td>1312</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>Berlin Wohnung</td>\n",
       "      <td>Anna</td>\n",
       "      <td>Friedrichshain-Kreuzberg</td>\n",
       "      <td>Tempelhofer Vorstadt</td>\n",
       "      <td>Private room</td>\n",
       "      <td>2018-11-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>14</td>\n",
       "      <td>216</td>\n",
       "      <td>5497</td>\n",
       "      <td>1325</td>\n",
       "      <td>11534</td>\n",
       "      <td>618</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  name host_name       neighbourhood_group  \\\n",
       "count            22493     22526                     22552   \n",
       "unique           21873      5997                        12   \n",
       "top     Berlin Wohnung      Anna  Friedrichshain-Kreuzberg   \n",
       "freq                14       216                      5497   \n",
       "\n",
       "               neighbourhood     room_type last_review  \n",
       "count                  22552         22552       18644  \n",
       "unique                   136             3        1312  \n",
       "top     Tempelhofer Vorstadt  Private room  2018-11-04  \n",
       "freq                    1325         11534         618  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "listings_obj = listings_df.select_dtypes(include=['object']).copy()\n",
    "listings_obj.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10.06 MB\n",
      "2.96 MB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>before</th>\n",
       "      <th>after</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>object</th>\n",
       "      <td>6.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>category</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>category</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>category</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>category</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>category</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          before  after\n",
       "object       6.0      1\n",
       "category     NaN      1\n",
       "category     NaN      1\n",
       "category     NaN      1\n",
       "category     NaN      1\n",
       "category     NaN      1"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "converted_obj = pd.DataFrame()\n",
    "\n",
    "for col in listings_obj.columns:\n",
    "    num_unique_values = len(listings_obj[col].unique())\n",
    "    num_total_values = len(listings_obj[col])\n",
    "    if num_unique_values / num_total_values < 0.5:\n",
    "        converted_obj.loc[:,col] = listings_obj[col].astype('category')\n",
    "    else:\n",
    "        converted_obj.loc[:,col] = listings_obj[col]\n",
    "        \n",
    "        \n",
    "print(mem_usage(listings_obj))\n",
    "print(mem_usage(converted_obj))\n",
    "\n",
    "compare_obj = pd.concat([listings_obj.dtypes, converted_obj.dtypes], axis=1)\n",
    "compare_obj.columns = ['before', 'after']\n",
    "compare_obj.apply(pd.Series.value_counts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11.79 MB\n",
      "3.59 MB\n"
     ]
    }
   ],
   "source": [
    "optimized_listings[converted_obj.columns] = converted_obj\n",
    "print(mem_usage(listings_df))\n",
    "print(mem_usage(optimized_listings))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{   'host_id': 'uint32',\n",
      "    'host_name': 'category',\n",
      "    'id': 'uint32',\n",
      "    'latitude': 'float32',\n",
      "    'longitude': 'float32',\n",
      "    'name': 'object',\n",
      "    'neighbourhood': 'category',\n",
      "    'neighbourhood_group': 'category',\n",
      "    'price': 'uint16',\n",
      "    'room_type': 'category'}\n"
     ]
    }
   ],
   "source": [
    "dtypes = optimized_listings.dtypes\n",
    "dtypes_col = dtypes.index\n",
    "dtypes_type = [i.name for i in dtypes.values]\n",
    "column_types = dict(zip(dtypes_col, dtypes_type))\n",
    "preview = first2pairs = {key: value for key, value in list(column_types.items())[:10]}\n",
    "pp = pprint.PrettyPrinter(indent=4)\n",
    "pp.pprint(preview)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3.59 MB\n",
      "11.50 MB\n"
     ]
    }
   ],
   "source": [
    "read_and_optimized = pd.read_csv(listings, dtype=column_types)\n",
    "not_optimizes = pd.read_csv(listings)\n",
    "print(mem_usage(read_and_optimized))\n",
    "print(mem_usage(not_optimizes))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Datetime optimization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tokenization took: 63.19 ms\n",
      "Type conversion took: 36.44 ms\n",
      "Parser memory cleanup took: 0.51 ms\n",
      "Tokenization took: 25.43 ms\n",
      "Type conversion took: 16.40 ms\n",
      "Parser memory cleanup took: 0.01 ms\n"
     ]
    }
   ],
   "source": [
    "reviews_df = pd.read_csv(reviews, verbose=True).rename(columns={\"listing_id\": \"id\"})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Function `convert` ran in average of 0.108751 seconds.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "@timeit(repeat=3, number=10)\n",
    "def convert(df, column_name):\n",
    "    return pd.to_datetime(df[column_name])\n",
    "\n",
    "reviews_df['date'] = convert(reviews_df, 'date')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Function `convert_with_format` ran in average of 0.027986 seconds.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "@timeit(repeat=3, number=100)\n",
    "def convert_with_format(df, column_name):\n",
    "    return pd.to_datetime(df[column_name], format='%Y-%m-%d %H:%M:%S.%f')\n",
    "\n",
    "reviews_df['date'] = convert_with_format(reviews_df, 'date')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Index optimization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Function `simple_merge` ran in average of 0.617740 seconds.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "@timeit(repeat=3, number=100)\n",
    "def simple_merge():\n",
    "    listings_df.merge(reviews_df, on='id')\n",
    "\n",
    "simple_merge()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Function `index_merge` ran in average of 0.190223 seconds.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "reviews_df1 = reviews_df.set_index('id')\n",
    "listings_df1 = listings_df.set_index('id')\n",
    "\n",
    "#@profile_dec\n",
    "@timeit(repeat=3, number=100)\n",
    "def index_merge():\n",
    "    listings_df1.merge(reviews_df1, left_index=True, right_index=True)\n",
    "\n",
    "index_merge()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "#@profile_dec\n",
    "#def index_merge():\n",
    "#    listings_df1.merge(reviews_df1, left_index=True, right_index=True)\n",
    "\n",
    "#index_merge()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12.6 µs ± 424 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)\n"
     ]
    }
   ],
   "source": [
    "listings_2 = listings_df.set_index('id', drop=False)\n",
    "%timeit listings_2.loc[29844866, 'name']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6.73 µs ± 121 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit listings_2.at[29844866, 'name']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "452 µs ± 36.1 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)\n"
     ]
    }
   ],
   "source": [
    "listings_reset = listings_df.reset_index(drop=True)\n",
    "%timeit listings_reset.loc[listings_reset['id'] == 29844866, 'name']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "225 µs ± 5.52 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit listings_reset.iloc[22529]['name']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Filter_optimization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "377 ms ± 139 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)\n"
     ]
    }
   ],
   "source": [
    "#listings_s = listings_df.sample(frac=0.2, random_state=1337)\n",
    "%timeit listings_df.merge(reviews_df, on='id')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "212 ms ± 6.87 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n"
     ]
    }
   ],
   "source": [
    "def optimized_merge(df1, df2, merge_column):\n",
    "    df2 = df2[df2[merge_column].isin(df1[merge_column])]\n",
    "    return df1.merge(df2, on=merge_column)\n",
    "\n",
    "%timeit optimized_merge(listings_df, reviews_df, 'id')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "When chaining multiple operations it is worthwhile to think about which operations to execute first. Filter steps should be executed as early as possible.\n",
    "Even when making inner joins between dataframes, it is worthwhile to filter before merging. If we sample our listings with .sample(frac=0.2) and then merge the reviews to it, we see that its more efficient to filter the reviews first.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Vectorization \n",
    "\n",
    "Vectorization is the process of executing operations on entire arrays. Similarly to numpy, Pandas has built in optimizations for vectorized operations. It is advised to avoid for loops when working with dataframes, since read and write operations are costly. It is not always possible to vectorize, so i will also show what the best iterative options for pandas are by comparing .iloc[], .iterrows(), .loc[]and.map()/.apply()."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What Pandas developers said?\n",
    "\n",
    "his is the general order of precedence for performance of various operations:\n",
    "\n",
    "1) vectorization\n",
    "2) using a custom cython routine\n",
    "3) apply\n",
    "    a) reductions that can be performed in cython\n",
    "    b) iteration in python space\n",
    "4) itertuples\n",
    "5) iterrows\n",
    "6) updating an empty frame (e.g. using loc one-row-at-a-time)\n",
    "\n",
    "Using a custom Cython routine is usually too complicated, so let's skip that for now.\n",
    "\n",
    "1) Vectorization is ALWAYS, ALWAYS the first and best choice. However, there is a small set of cases (usually involving a recurrence) which cannot be vectorized in obvious ways. Furthermore, on a smallish DataFrame, it may be faster to use other methods.\n",
    "\n",
    "3) apply usually can be handled by an iterator in Cython space. This is handled internally by pandas, though it depends on what is going on inside the apply expression. For example, df.apply(lambda x: np.sum(x)) will be executed pretty swiftly, though of course, df.sum(1) is even better. However something like df.apply(lambda x: x['b'] + 1) will be executed in Python space, and consequently is much slower.\n",
    "\n",
    "4) itertuples does not box the data into a Series. It just returns the data in the form of tuples.\n",
    "\n",
    "5) iterrows DOES box the data into a Series. Unless you really need this, use another method.\n",
    "\n",
    "6) Updating an empty frame a-single-row-at-a-time. I have seen this method used WAY too much. It is by far the slowest. It is probably common place (and reasonably fast for some python structures), but a DataFrame does a fair number of checks on indexing, so this will always be very slow to update a row at a time. Much better to create new structures and concat."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Function `d_read` ran in average of 0.006361 seconds.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "demand_df = d_read(demand)\n",
    "demand_df['date_time'] = pd.to_datetime(demand_df['date_time'])\n",
    "dd = demand_df.sample(400)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Function `apply_tariff_loop` ran in average of 0.227377 seconds.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "def apply_tariff(kwh, hour):\n",
    "    \"\"\"Calculates cost of electricity for given hour.\"\"\"    \n",
    "    if 0 <= hour < 7:\n",
    "        rate = 12\n",
    "    elif 7 <= hour < 17:\n",
    "        rate = 20\n",
    "    elif 17 <= hour < 24:\n",
    "        rate = 28\n",
    "    else:\n",
    "        raise ValueError(f'Invalid hour: {hour}')\n",
    "    return rate * kwh\n",
    "\n",
    "\n",
    "#IT IS VERY BAD SOLUTION\n",
    "@timeit(repeat=3, number=100)\n",
    "def apply_tariff_loop(df):\n",
    "     energy_cost_list = []\n",
    "     for i in range(len(df)):\n",
    "         # Get electricity used and hour of day\n",
    "         energy_used = df.iloc[i]['energy_kwh']\n",
    "         hour = df.iloc[i]['date_time'].hour\n",
    "         energy_cost = apply_tariff(energy_used, hour)\n",
    "         energy_cost_list.append(energy_cost)\n",
    "     df['cost_cents'] = energy_cost_list\n",
    " \n",
    "apply_tariff_loop(dd)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can consider the above to be an “antipattern” in Pandas for several reasons. Firstly, it needs to initialize a list in which the outputs will be recorded.\n",
    "\n",
    "Secondly, it uses the opaque object range(0, len(df)) to loop over, and then after applying apply_tariff(), it has to append the result to a list that is used to make the new DataFrame column. It also does what is called chained indexing with df.iloc[i]['date_time'], which often leads to unintended results.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Function `apply_tariff_iterrows` ran in average of 0.059319 seconds.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "@timeit(repeat=3, number=100)\n",
    "def apply_tariff_iterrows(df):\n",
    "    energy_cost_list = []\n",
    "    for index, row in df.iterrows():\n",
    "        # Get electricity used and hour of day\n",
    "        energy_used = row['energy_kwh']\n",
    "        hour = row['date_time'].hour\n",
    "        # Append cost list\n",
    "        energy_cost = apply_tariff(energy_used, hour)\n",
    "        energy_cost_list.append(energy_cost)\n",
    "    df['cost_cents'] = energy_cost_list\n",
    "\n",
    "apply_tariff_iterrows(dd)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    ".itertuples() yields a namedtuple for each row, with the row’s index value as the first element of the tuple. A nametuple is a data structure from Python’s collections module that behaves like a Python tuple but has fields accessible by attribute lookup.\n",
    "\n",
    ".iterrows() yields pairs (tuples) of (index, Series) for each row in the DataFrame.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Function `apply_tariff_withapply` ran in average of 0.010794 seconds.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "@timeit(repeat=3, number=100)\n",
    "def apply_tariff_withapply(df):\n",
    "    df['cost_cents'] = df.apply(\n",
    "        lambda row: apply_tariff(\n",
    "            kwh=row['energy_kwh'],\n",
    "            hour=row['date_time'].hour),\n",
    "        axis=1)\n",
    "\n",
    "apply_tariff_withapply(dd)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Pandas’ .apply() method takes functions (callables) and applies them along an axis of a DataFrame (all rows, or all columns).\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Function `apply_tariff_isin` ran in average of 0.003570 seconds.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "dd.set_index('date_time', inplace=True)\n",
    "\n",
    "@timeit(repeat=3, number=100)\n",
    "def apply_tariff_isin(df):\n",
    "    # Define hour range Boolean arrays\n",
    "    peak_hours = df.index.hour.isin(range(17, 24))\n",
    "    shoulder_hours = df.index.hour.isin(range(7, 17))\n",
    "    off_peak_hours = df.index.hour.isin(range(0, 7))\n",
    "\n",
    "    # Apply tariffs to hour ranges\n",
    "    df.loc[peak_hours, 'cost_cents'] = df.loc[peak_hours, 'energy_kwh'] * 28\n",
    "    df.loc[shoulder_hours,'cost_cents'] = df.loc[shoulder_hours, 'energy_kwh'] * 20\n",
    "    df.loc[off_peak_hours,'cost_cents'] = df.loc[off_peak_hours, 'energy_kwh'] * 12\n",
    "    \n",
    "apply_tariff_isin(dd)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "But how can you apply condition calculations as vectorized operations in Pandas? One trick is to select and group parts the DataFrame based on your conditions and then apply a vectorized operation to each selected group.\n",
    "\n",
    "In this next example, you will see how to select rows with Pandas’ .isin() method and then apply the appropriate tariff in a vectorized operation\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Function `apply_tariff_cut` ran in average of 0.001685 seconds.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "@timeit(repeat=3, number=100)\n",
    "def apply_tariff_cut(df):\n",
    "    cents_per_kwh = pd.cut(x=df.index.hour,\n",
    "                           bins=[0, 7, 17, 24],\n",
    "                           include_lowest=True,\n",
    "                           labels=[12, 20, 28]).astype(int)\n",
    "    df['cost_cents'] = cents_per_kwh * df['energy_kwh']\n",
    "    \n",
    "apply_tariff_cut(dd)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In apply_tariff_isin(), we are still admittedly doing some “manual work” by calling df.loc and df.index.hour.isin() three times each.\n",
    "\n",
    "This is a fully vectorized way to get to your intended result, and it comes out on top in terms of timing\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Function `apply_tariff_digitize` ran in average of 0.000304 seconds.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "@timeit(repeat=3, number=100)\n",
    "def apply_tariff_digitize(df):\n",
    "    prices = np.array([12, 20, 28])\n",
    "    bins = np.digitize(df.index.hour.values, bins=[7, 17, 24])\n",
    "    df['cost_cents'] = prices[bins] * df['energy_kwh'].values\n",
    "    \n",
    "apply_tariff_digitize(dd)    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "NumPy’s digitize() function. It is similar to Pandas’ cut() in that the data will be binned, but this time it will be represented by an array of indexes representing which bin each hour belongs to.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    ".eval() .query()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "nrows, ncols = 100000, 100\n",
    "rng = np.random.RandomState(42)\n",
    "df1, df2, df3, df4 = (pd.DataFrame(rng.rand(nrows, ncols))\n",
    "                      for i in range(4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "97.6 ms ± 905 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit pd.eval('df1 + df2 + df3 + df4')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "92.4 ms ± 1.94 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit df1 + df2 + df3 + df4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "      <th>C</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.615875</td>\n",
       "      <td>0.525167</td>\n",
       "      <td>0.047354</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.330858</td>\n",
       "      <td>0.412879</td>\n",
       "      <td>0.441564</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.689047</td>\n",
       "      <td>0.559068</td>\n",
       "      <td>0.230350</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.290486</td>\n",
       "      <td>0.695479</td>\n",
       "      <td>0.852587</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.424280</td>\n",
       "      <td>0.534344</td>\n",
       "      <td>0.245216</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>0.746470</td>\n",
       "      <td>0.545752</td>\n",
       "      <td>0.614236</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>0.223362</td>\n",
       "      <td>0.748549</td>\n",
       "      <td>0.550715</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>0.047455</td>\n",
       "      <td>0.450104</td>\n",
       "      <td>0.468734</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>0.895440</td>\n",
       "      <td>0.894235</td>\n",
       "      <td>0.209260</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>0.254963</td>\n",
       "      <td>0.861045</td>\n",
       "      <td>0.704858</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1000 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            A         B         C\n",
       "0    0.615875  0.525167  0.047354\n",
       "1    0.330858  0.412879  0.441564\n",
       "2    0.689047  0.559068  0.230350\n",
       "3    0.290486  0.695479  0.852587\n",
       "4    0.424280  0.534344  0.245216\n",
       "..        ...       ...       ...\n",
       "995  0.746470  0.545752  0.614236\n",
       "996  0.223362  0.748549  0.550715\n",
       "997  0.047455  0.450104  0.468734\n",
       "998  0.895440  0.894235  0.209260\n",
       "999  0.254963  0.861045  0.704858\n",
       "\n",
       "[1000 rows x 3 columns]"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_query = pd.DataFrame(rng.rand(1000, 3), columns=['A', 'B', 'C'])\n",
    "df_query"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "902 µs ± 49.8 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit df_query[(df_query.A < 0.5) & (df_query.B < 0.5)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.28 ms ± 183 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit df_query.query('A < 0.5 and B < 0.5')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "798 µs ± 44.7 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)\n",
      "2.13 ms ± 60.8 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)\n"
     ]
    }
   ],
   "source": [
    "Cmean = df_query['C'].mean()\n",
    "%timeit result1 = df_query[(df_query.A < Cmean) & (df_query.B < Cmean)]\n",
    "%timeit result2 = df_query.query('A < @Cmean and B < @Cmean')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Tricks (15 - 20 min)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Trick 1\n",
    "#profile = listings_df.profile_report()\n",
    "#profile.to_file(output_file=output)\n",
    "#profile"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>#</th>\n",
       "      <th>Trick</th>\n",
       "      <th>15</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>#</th>\n",
       "      <th>Trick</th>\n",
       "      <th>15</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Trick 2\n",
    "df = pd.read_clipboard()\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/okravchenko/PycharmProjects/pandas_tricks/myvenv/lib/python3.6/site-packages/ipykernel_launcher.py:3: FutureWarning: The pandas.np module is deprecated and will be removed from pandas in a future version. Import numpy directly instead\n",
      "  This is separate from the ipykernel package so we can avoid doing imports until\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "nan"
      ]
     },
     "execution_count": 165,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Trick 3\n",
    "# You can use numpy without importing it\n",
    "pd.np.nan"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/okravchenko/PycharmProjects/pandas_tricks/myvenv/lib/python3.6/site-packages/pandas/util/__init__.py:23: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n",
      "  import pandas.util.testing\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "      <th>C</th>\n",
       "      <th>D</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>pSJjyZoBpB</th>\n",
       "      <td>0.714897</td>\n",
       "      <td>0.988601</td>\n",
       "      <td>-0.202326</td>\n",
       "      <td>0.881356</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4D8J6qvpJE</th>\n",
       "      <td>-1.854868</td>\n",
       "      <td>-0.112148</td>\n",
       "      <td>0.658709</td>\n",
       "      <td>1.369165</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CkmZNeMYKM</th>\n",
       "      <td>-0.076568</td>\n",
       "      <td>-1.382029</td>\n",
       "      <td>-2.019700</td>\n",
       "      <td>0.904368</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0o7JMHcMdq</th>\n",
       "      <td>0.306416</td>\n",
       "      <td>1.143982</td>\n",
       "      <td>-0.432829</td>\n",
       "      <td>-0.041392</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>vmKEUI4ykK</th>\n",
       "      <td>-0.410971</td>\n",
       "      <td>0.972225</td>\n",
       "      <td>1.812504</td>\n",
       "      <td>1.417916</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dSk1NoGvvf</th>\n",
       "      <td>-0.191573</td>\n",
       "      <td>-0.050232</td>\n",
       "      <td>-0.820390</td>\n",
       "      <td>-2.027947</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>YIEVw6z3a7</th>\n",
       "      <td>1.171626</td>\n",
       "      <td>0.666362</td>\n",
       "      <td>0.800444</td>\n",
       "      <td>-0.007618</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>QjOwfYzZGZ</th>\n",
       "      <td>-1.714355</td>\n",
       "      <td>1.189557</td>\n",
       "      <td>1.264362</td>\n",
       "      <td>-0.422383</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>vt2Ce822Fx</th>\n",
       "      <td>-0.838913</td>\n",
       "      <td>2.069088</td>\n",
       "      <td>-1.223751</td>\n",
       "      <td>1.356260</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tlQeu7k9XU</th>\n",
       "      <td>0.579015</td>\n",
       "      <td>0.141305</td>\n",
       "      <td>0.576735</td>\n",
       "      <td>1.494810</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>zb4fEFx21h</th>\n",
       "      <td>-2.249923</td>\n",
       "      <td>0.877460</td>\n",
       "      <td>0.988045</td>\n",
       "      <td>0.406413</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>HOnHEDDn1y</th>\n",
       "      <td>0.278705</td>\n",
       "      <td>0.373367</td>\n",
       "      <td>-0.199062</td>\n",
       "      <td>0.293664</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>q3fNni6s93</th>\n",
       "      <td>0.943045</td>\n",
       "      <td>0.892671</td>\n",
       "      <td>0.967201</td>\n",
       "      <td>0.299227</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>l5ltQQhDSJ</th>\n",
       "      <td>0.310991</td>\n",
       "      <td>0.055744</td>\n",
       "      <td>-0.040473</td>\n",
       "      <td>0.463064</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>lq9R48BNLA</th>\n",
       "      <td>1.679156</td>\n",
       "      <td>-2.808187</td>\n",
       "      <td>-0.840771</td>\n",
       "      <td>0.823816</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>zPNL01yCDU</th>\n",
       "      <td>-2.613930</td>\n",
       "      <td>-1.007763</td>\n",
       "      <td>-0.963295</td>\n",
       "      <td>-0.538252</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>JsXyi9OXcP</th>\n",
       "      <td>0.658004</td>\n",
       "      <td>-0.129366</td>\n",
       "      <td>-0.495296</td>\n",
       "      <td>-0.367905</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cWcUufpQb9</th>\n",
       "      <td>-1.066387</td>\n",
       "      <td>-0.492941</td>\n",
       "      <td>-1.823843</td>\n",
       "      <td>0.695233</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>uWcqd3Z4zR</th>\n",
       "      <td>0.698810</td>\n",
       "      <td>1.415073</td>\n",
       "      <td>0.305269</td>\n",
       "      <td>0.039034</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>XBM4Y6Ib11</th>\n",
       "      <td>-1.985595</td>\n",
       "      <td>0.985790</td>\n",
       "      <td>-0.128100</td>\n",
       "      <td>0.630387</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>xay4vpIkby</th>\n",
       "      <td>-0.595765</td>\n",
       "      <td>0.221349</td>\n",
       "      <td>-0.309195</td>\n",
       "      <td>-0.011029</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>eFmnYBTs34</th>\n",
       "      <td>1.001177</td>\n",
       "      <td>0.441530</td>\n",
       "      <td>-0.392937</td>\n",
       "      <td>0.270298</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>uj6nnHqOST</th>\n",
       "      <td>-1.718152</td>\n",
       "      <td>0.385562</td>\n",
       "      <td>0.255971</td>\n",
       "      <td>1.439179</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>hkfGhPKdAw</th>\n",
       "      <td>0.848042</td>\n",
       "      <td>-0.296234</td>\n",
       "      <td>0.162036</td>\n",
       "      <td>-0.505019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>rkuqaTtNOW</th>\n",
       "      <td>0.468582</td>\n",
       "      <td>2.591088</td>\n",
       "      <td>0.706702</td>\n",
       "      <td>-0.829425</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RbBa6f9hPv</th>\n",
       "      <td>0.754902</td>\n",
       "      <td>-1.626977</td>\n",
       "      <td>0.935290</td>\n",
       "      <td>-1.196510</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4BrFH6DqTO</th>\n",
       "      <td>-0.768832</td>\n",
       "      <td>0.134553</td>\n",
       "      <td>-0.443890</td>\n",
       "      <td>0.993485</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CgPHqORBrI</th>\n",
       "      <td>1.284968</td>\n",
       "      <td>0.105240</td>\n",
       "      <td>-0.568276</td>\n",
       "      <td>-0.509625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>L1xX4nXrfm</th>\n",
       "      <td>-1.410510</td>\n",
       "      <td>1.226987</td>\n",
       "      <td>-0.119667</td>\n",
       "      <td>-1.536850</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>01b6CKjopS</th>\n",
       "      <td>1.868615</td>\n",
       "      <td>1.294601</td>\n",
       "      <td>0.065204</td>\n",
       "      <td>0.052789</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   A         B         C         D\n",
       "pSJjyZoBpB  0.714897  0.988601 -0.202326  0.881356\n",
       "4D8J6qvpJE -1.854868 -0.112148  0.658709  1.369165\n",
       "CkmZNeMYKM -0.076568 -1.382029 -2.019700  0.904368\n",
       "0o7JMHcMdq  0.306416  1.143982 -0.432829 -0.041392\n",
       "vmKEUI4ykK -0.410971  0.972225  1.812504  1.417916\n",
       "dSk1NoGvvf -0.191573 -0.050232 -0.820390 -2.027947\n",
       "YIEVw6z3a7  1.171626  0.666362  0.800444 -0.007618\n",
       "QjOwfYzZGZ -1.714355  1.189557  1.264362 -0.422383\n",
       "vt2Ce822Fx -0.838913  2.069088 -1.223751  1.356260\n",
       "tlQeu7k9XU  0.579015  0.141305  0.576735  1.494810\n",
       "zb4fEFx21h -2.249923  0.877460  0.988045  0.406413\n",
       "HOnHEDDn1y  0.278705  0.373367 -0.199062  0.293664\n",
       "q3fNni6s93  0.943045  0.892671  0.967201  0.299227\n",
       "l5ltQQhDSJ  0.310991  0.055744 -0.040473  0.463064\n",
       "lq9R48BNLA  1.679156 -2.808187 -0.840771  0.823816\n",
       "zPNL01yCDU -2.613930 -1.007763 -0.963295 -0.538252\n",
       "JsXyi9OXcP  0.658004 -0.129366 -0.495296 -0.367905\n",
       "cWcUufpQb9 -1.066387 -0.492941 -1.823843  0.695233\n",
       "uWcqd3Z4zR  0.698810  1.415073  0.305269  0.039034\n",
       "XBM4Y6Ib11 -1.985595  0.985790 -0.128100  0.630387\n",
       "xay4vpIkby -0.595765  0.221349 -0.309195 -0.011029\n",
       "eFmnYBTs34  1.001177  0.441530 -0.392937  0.270298\n",
       "uj6nnHqOST -1.718152  0.385562  0.255971  1.439179\n",
       "hkfGhPKdAw  0.848042 -0.296234  0.162036 -0.505019\n",
       "rkuqaTtNOW  0.468582  2.591088  0.706702 -0.829425\n",
       "RbBa6f9hPv  0.754902 -1.626977  0.935290 -1.196510\n",
       "4BrFH6DqTO -0.768832  0.134553 -0.443890  0.993485\n",
       "CgPHqORBrI  1.284968  0.105240 -0.568276 -0.509625\n",
       "L1xX4nXrfm -1.410510  1.226987 -0.119667 -1.536850\n",
       "01b6CKjopS  1.868615  1.294601  0.065204  0.052789"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Trick 4\n",
    "test_frame = pd.util.testing.makeDataFrame()\n",
    "test_frame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(401963, 2)\n",
      "(4049, 2)\n"
     ]
    }
   ],
   "source": [
    "# Trick 5\n",
    "# working with big dataset/skiprows\n",
    "df_normal = pd.read_csv(reviews)\n",
    "print(df_normal.shape)\n",
    "df_big = pd.read_csv(reviews, skiprows = lambda x: x > 0 and np.random.rand() > 0.01)\n",
    "print(df_big.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>id</th>\n",
       "      <td>2015</td>\n",
       "      <td>2695</td>\n",
       "      <td>3176</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>name</th>\n",
       "      <td>Berlin-Mitte Value! Quiet courtyard/very central</td>\n",
       "      <td>Prenzlauer Berg close to Mauerpark</td>\n",
       "      <td>Fabulous Flat in great Location</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>host_id</th>\n",
       "      <td>2217</td>\n",
       "      <td>2986</td>\n",
       "      <td>3718</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>host_name</th>\n",
       "      <td>Ian</td>\n",
       "      <td>Michael</td>\n",
       "      <td>Britta</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>neighbourhood_group</th>\n",
       "      <td>Mitte</td>\n",
       "      <td>Pankow</td>\n",
       "      <td>Pankow</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>neighbourhood</th>\n",
       "      <td>Brunnenstr. Süd</td>\n",
       "      <td>Prenzlauer Berg Nordwest</td>\n",
       "      <td>Prenzlauer Berg Südwest</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>latitude</th>\n",
       "      <td>52.5345</td>\n",
       "      <td>52.5485</td>\n",
       "      <td>52.535</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>longitude</th>\n",
       "      <td>13.4026</td>\n",
       "      <td>13.4046</td>\n",
       "      <td>13.4176</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>room_type</th>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>Private room</td>\n",
       "      <td>Entire home/apt</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>price</th>\n",
       "      <td>60</td>\n",
       "      <td>17</td>\n",
       "      <td>90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>minimum_nights</th>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>number_of_reviews</th>\n",
       "      <td>118</td>\n",
       "      <td>6</td>\n",
       "      <td>143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>last_review</th>\n",
       "      <td>2018-10-28</td>\n",
       "      <td>2018-10-01</td>\n",
       "      <td>2017-03-20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>reviews_per_month</th>\n",
       "      <td>3.76</td>\n",
       "      <td>1.42</td>\n",
       "      <td>1.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>calculated_host_listings_count</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>availability_365</th>\n",
       "      <td>141</td>\n",
       "      <td>0</td>\n",
       "      <td>220</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                                               0  \\\n",
       "id                                                                          2015   \n",
       "name                            Berlin-Mitte Value! Quiet courtyard/very central   \n",
       "host_id                                                                     2217   \n",
       "host_name                                                                    Ian   \n",
       "neighbourhood_group                                                        Mitte   \n",
       "neighbourhood                                                    Brunnenstr. Süd   \n",
       "latitude                                                                 52.5345   \n",
       "longitude                                                                13.4026   \n",
       "room_type                                                        Entire home/apt   \n",
       "price                                                                         60   \n",
       "minimum_nights                                                                 4   \n",
       "number_of_reviews                                                            118   \n",
       "last_review                                                           2018-10-28   \n",
       "reviews_per_month                                                           3.76   \n",
       "calculated_host_listings_count                                                 4   \n",
       "availability_365                                                             141   \n",
       "\n",
       "                                                                 1  \\\n",
       "id                                                            2695   \n",
       "name                            Prenzlauer Berg close to Mauerpark   \n",
       "host_id                                                       2986   \n",
       "host_name                                                  Michael   \n",
       "neighbourhood_group                                         Pankow   \n",
       "neighbourhood                             Prenzlauer Berg Nordwest   \n",
       "latitude                                                   52.5485   \n",
       "longitude                                                  13.4046   \n",
       "room_type                                             Private room   \n",
       "price                                                           17   \n",
       "minimum_nights                                                   2   \n",
       "number_of_reviews                                                6   \n",
       "last_review                                             2018-10-01   \n",
       "reviews_per_month                                             1.42   \n",
       "calculated_host_listings_count                                   1   \n",
       "availability_365                                                 0   \n",
       "\n",
       "                                                              2  \n",
       "id                                                         3176  \n",
       "name                            Fabulous Flat in great Location  \n",
       "host_id                                                    3718  \n",
       "host_name                                                Britta  \n",
       "neighbourhood_group                                      Pankow  \n",
       "neighbourhood                           Prenzlauer Berg Südwest  \n",
       "latitude                                                 52.535  \n",
       "longitude                                               13.4176  \n",
       "room_type                                       Entire home/apt  \n",
       "price                                                        90  \n",
       "minimum_nights                                               62  \n",
       "number_of_reviews                                           143  \n",
       "last_review                                          2017-03-20  \n",
       "reviews_per_month                                          1.25  \n",
       "calculated_host_listings_count                                1  \n",
       "availability_365                                            220  "
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Trick 6\n",
    "listings_df.head(3).T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0               Ian\n",
       "1           Michael\n",
       "2            Britta\n",
       "3              Jana\n",
       "4            Bright\n",
       "            ...    \n",
       "22547       Ulisses\n",
       "22548          Jörg\n",
       "22549        Martin\n",
       "22550    Arte Luise\n",
       "22551     Sebastian\n",
       "Name: host_name, Length: 22552, dtype: object"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "host_series = listings_df.pop('host_name')\n",
    "host_series"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>id</th>\n",
       "      <td>2015</td>\n",
       "      <td>2695</td>\n",
       "      <td>3176</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>name</th>\n",
       "      <td>Berlin-Mitte Value! Quiet courtyard/very central</td>\n",
       "      <td>Prenzlauer Berg close to Mauerpark</td>\n",
       "      <td>Fabulous Flat in great Location</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>host_id</th>\n",
       "      <td>2217</td>\n",
       "      <td>2986</td>\n",
       "      <td>3718</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>neighbourhood_group</th>\n",
       "      <td>Mitte</td>\n",
       "      <td>Pankow</td>\n",
       "      <td>Pankow</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>neighbourhood</th>\n",
       "      <td>Brunnenstr. Süd</td>\n",
       "      <td>Prenzlauer Berg Nordwest</td>\n",
       "      <td>Prenzlauer Berg Südwest</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>latitude</th>\n",
       "      <td>52.5345</td>\n",
       "      <td>52.5485</td>\n",
       "      <td>52.535</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>longitude</th>\n",
       "      <td>13.4026</td>\n",
       "      <td>13.4046</td>\n",
       "      <td>13.4176</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>room_type</th>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>Private room</td>\n",
       "      <td>Entire home/apt</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>price</th>\n",
       "      <td>60</td>\n",
       "      <td>17</td>\n",
       "      <td>90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>minimum_nights</th>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>number_of_reviews</th>\n",
       "      <td>118</td>\n",
       "      <td>6</td>\n",
       "      <td>143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>last_review</th>\n",
       "      <td>2018-10-28</td>\n",
       "      <td>2018-10-01</td>\n",
       "      <td>2017-03-20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>reviews_per_month</th>\n",
       "      <td>3.76</td>\n",
       "      <td>1.42</td>\n",
       "      <td>1.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>calculated_host_listings_count</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>availability_365</th>\n",
       "      <td>141</td>\n",
       "      <td>0</td>\n",
       "      <td>220</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                                               0  \\\n",
       "id                                                                          2015   \n",
       "name                            Berlin-Mitte Value! Quiet courtyard/very central   \n",
       "host_id                                                                     2217   \n",
       "neighbourhood_group                                                        Mitte   \n",
       "neighbourhood                                                    Brunnenstr. Süd   \n",
       "latitude                                                                 52.5345   \n",
       "longitude                                                                13.4026   \n",
       "room_type                                                        Entire home/apt   \n",
       "price                                                                         60   \n",
       "minimum_nights                                                                 4   \n",
       "number_of_reviews                                                            118   \n",
       "last_review                                                           2018-10-28   \n",
       "reviews_per_month                                                           3.76   \n",
       "calculated_host_listings_count                                                 4   \n",
       "availability_365                                                             141   \n",
       "\n",
       "                                                                 1  \\\n",
       "id                                                            2695   \n",
       "name                            Prenzlauer Berg close to Mauerpark   \n",
       "host_id                                                       2986   \n",
       "neighbourhood_group                                         Pankow   \n",
       "neighbourhood                             Prenzlauer Berg Nordwest   \n",
       "latitude                                                   52.5485   \n",
       "longitude                                                  13.4046   \n",
       "room_type                                             Private room   \n",
       "price                                                           17   \n",
       "minimum_nights                                                   2   \n",
       "number_of_reviews                                                6   \n",
       "last_review                                             2018-10-01   \n",
       "reviews_per_month                                             1.42   \n",
       "calculated_host_listings_count                                   1   \n",
       "availability_365                                                 0   \n",
       "\n",
       "                                                              2  \n",
       "id                                                         3176  \n",
       "name                            Fabulous Flat in great Location  \n",
       "host_id                                                    3718  \n",
       "neighbourhood_group                                      Pankow  \n",
       "neighbourhood                           Prenzlauer Berg Südwest  \n",
       "latitude                                                 52.535  \n",
       "longitude                                               13.4176  \n",
       "room_type                                       Entire home/apt  \n",
       "price                                                        90  \n",
       "minimum_nights                                               62  \n",
       "number_of_reviews                                           143  \n",
       "last_review                                          2017-03-20  \n",
       "reviews_per_month                                          1.25  \n",
       "calculated_host_listings_count                                1  \n",
       "availability_365                                            220  "
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "listings_df.head(3).T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>availability_365</th>\n",
       "      <td>141</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>calculated_host_listings_count</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>reviews_per_month</th>\n",
       "      <td>3.76</td>\n",
       "      <td>1.42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>last_review</th>\n",
       "      <td>2018-10-28</td>\n",
       "      <td>2018-10-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>number_of_reviews</th>\n",
       "      <td>118</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>minimum_nights</th>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>price</th>\n",
       "      <td>60</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>room_type</th>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>Private room</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>longitude</th>\n",
       "      <td>13.4026</td>\n",
       "      <td>13.4046</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>latitude</th>\n",
       "      <td>52.5345</td>\n",
       "      <td>52.5485</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>neighbourhood</th>\n",
       "      <td>Brunnenstr. Süd</td>\n",
       "      <td>Prenzlauer Berg Nordwest</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>neighbourhood_group</th>\n",
       "      <td>Mitte</td>\n",
       "      <td>Pankow</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>host_id</th>\n",
       "      <td>2217</td>\n",
       "      <td>2986</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>name</th>\n",
       "      <td>Berlin-Mitte Value! Quiet courtyard/very central</td>\n",
       "      <td>Prenzlauer Berg close to Mauerpark</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>id</th>\n",
       "      <td>2015</td>\n",
       "      <td>2695</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                                               0  \\\n",
       "availability_365                                                             141   \n",
       "calculated_host_listings_count                                                 4   \n",
       "reviews_per_month                                                           3.76   \n",
       "last_review                                                           2018-10-28   \n",
       "number_of_reviews                                                            118   \n",
       "minimum_nights                                                                 4   \n",
       "price                                                                         60   \n",
       "room_type                                                        Entire home/apt   \n",
       "longitude                                                                13.4026   \n",
       "latitude                                                                 52.5345   \n",
       "neighbourhood                                                    Brunnenstr. Süd   \n",
       "neighbourhood_group                                                        Mitte   \n",
       "host_id                                                                     2217   \n",
       "name                            Berlin-Mitte Value! Quiet courtyard/very central   \n",
       "id                                                                          2015   \n",
       "\n",
       "                                                                 1  \n",
       "availability_365                                                 0  \n",
       "calculated_host_listings_count                                   1  \n",
       "reviews_per_month                                             1.42  \n",
       "last_review                                             2018-10-01  \n",
       "number_of_reviews                                                6  \n",
       "minimum_nights                                                   2  \n",
       "price                                                           17  \n",
       "room_type                                             Private room  \n",
       "longitude                                                  13.4046  \n",
       "latitude                                                   52.5485  \n",
       "neighbourhood                             Prenzlauer Berg Nordwest  \n",
       "neighbourhood_group                                         Pankow  \n",
       "host_id                                                       2986  \n",
       "name                            Prenzlauer Berg close to Mauerpark  \n",
       "id                                                            2695  "
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Trick 7\n",
    "listings_reverse = listings_df.loc[:, ::-1]\n",
    "listings_reverse.head(2).T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Other                       12424\n",
       "Friedrichshain-Kreuzberg     5497\n",
       "Mitte                        4631\n",
       "Name: neighbourhood_group, dtype: int64"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Trick 8\n",
    "n_count = listings_reverse.where(listings_reverse.neighbourhood_group\n",
    "                                 .isin(listings_reverse.neighbourhood_group.value_counts()\n",
    "                                                                        .nlargest(2).index), other='Other')\n",
    "n_count.neighbourhood_group.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>1</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>availability_365</th>\n",
       "      <td>0</td>\n",
       "      <td>297</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>calculated_host_listings_count</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>reviews_per_month</th>\n",
       "      <td>1.42</td>\n",
       "      <td>0.39</td>\n",
       "      <td>1.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>last_review</th>\n",
       "      <td>2018-10-01</td>\n",
       "      <td>2018-08-16</td>\n",
       "      <td>2018-11-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>number_of_reviews</th>\n",
       "      <td>6</td>\n",
       "      <td>25</td>\n",
       "      <td>197</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>minimum_nights</th>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>price</th>\n",
       "      <td>17</td>\n",
       "      <td>26</td>\n",
       "      <td>42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>room_type</th>\n",
       "      <td>Private room</td>\n",
       "      <td>Private room</td>\n",
       "      <td>Private room</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>longitude</th>\n",
       "      <td>13.4046</td>\n",
       "      <td>13.3491</td>\n",
       "      <td>13.4151</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>latitude</th>\n",
       "      <td>52.5485</td>\n",
       "      <td>52.4989</td>\n",
       "      <td>52.5432</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>neighbourhood</th>\n",
       "      <td>Prenzlauer Berg Nordwest</td>\n",
       "      <td>Schöneberg-Nord</td>\n",
       "      <td>Helmholtzplatz</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>neighbourhood_group</th>\n",
       "      <td>Pankow</td>\n",
       "      <td>Tempelhof - Schöneberg</td>\n",
       "      <td>Pankow</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>host_id</th>\n",
       "      <td>2986</td>\n",
       "      <td>4108</td>\n",
       "      <td>17391</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>name</th>\n",
       "      <td>Prenzlauer Berg close to Mauerpark</td>\n",
       "      <td>BerlinSpot Schöneberg near KaDeWe</td>\n",
       "      <td>BrightRoom with sunny greenview!</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>id</th>\n",
       "      <td>2695</td>\n",
       "      <td>3309</td>\n",
       "      <td>7071</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                                 1  \\\n",
       "availability_365                                                 0   \n",
       "calculated_host_listings_count                                   1   \n",
       "reviews_per_month                                             1.42   \n",
       "last_review                                             2018-10-01   \n",
       "number_of_reviews                                                6   \n",
       "minimum_nights                                                   2   \n",
       "price                                                           17   \n",
       "room_type                                             Private room   \n",
       "longitude                                                  13.4046   \n",
       "latitude                                                   52.5485   \n",
       "neighbourhood                             Prenzlauer Berg Nordwest   \n",
       "neighbourhood_group                                         Pankow   \n",
       "host_id                                                       2986   \n",
       "name                            Prenzlauer Berg close to Mauerpark   \n",
       "id                                                            2695   \n",
       "\n",
       "                                                                3  \\\n",
       "availability_365                                              297   \n",
       "calculated_host_listings_count                                  1   \n",
       "reviews_per_month                                            0.39   \n",
       "last_review                                            2018-08-16   \n",
       "number_of_reviews                                              25   \n",
       "minimum_nights                                                  5   \n",
       "price                                                          26   \n",
       "room_type                                            Private room   \n",
       "longitude                                                 13.3491   \n",
       "latitude                                                  52.4989   \n",
       "neighbourhood                                     Schöneberg-Nord   \n",
       "neighbourhood_group                        Tempelhof - Schöneberg   \n",
       "host_id                                                      4108   \n",
       "name                            BerlinSpot Schöneberg near KaDeWe   \n",
       "id                                                           3309   \n",
       "\n",
       "                                                               4  \n",
       "availability_365                                              26  \n",
       "calculated_host_listings_count                                 1  \n",
       "reviews_per_month                                           1.75  \n",
       "last_review                                           2018-11-04  \n",
       "number_of_reviews                                            197  \n",
       "minimum_nights                                                 2  \n",
       "price                                                         42  \n",
       "room_type                                           Private room  \n",
       "longitude                                                13.4151  \n",
       "latitude                                                 52.5432  \n",
       "neighbourhood                                     Helmholtzplatz  \n",
       "neighbourhood_group                                       Pankow  \n",
       "host_id                                                    17391  \n",
       "name                            BrightRoom with sunny greenview!  \n",
       "id                                                          7071  "
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Trick 9\n",
    "crit1 = listings_reverse.price < 60\n",
    "crit2 = listings_reverse.number_of_reviews > 3\n",
    "critera = reduce(lambda x, y: x & y, [crit1, crit2])\n",
    "listings_reverse[critera].head(3).T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<class 'str'>      22493\n",
       "<class 'float'>       59\n",
       "Name: name, dtype: int64"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Trick 10\n",
    "listings_reverse.name.apply(type).value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>availability_365</th>\n",
       "      <td>141</td>\n",
       "      <td>0</td>\n",
       "      <td>220</td>\n",
       "      <td>297</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>calculated_host_listings_count</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>reviews_per_month</th>\n",
       "      <td>3.76</td>\n",
       "      <td>1.42</td>\n",
       "      <td>1.25</td>\n",
       "      <td>0.39</td>\n",
       "      <td>1.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>last_review</th>\n",
       "      <td>2018-10-28</td>\n",
       "      <td>2018-10-01</td>\n",
       "      <td>2017-03-20</td>\n",
       "      <td>2018-08-16</td>\n",
       "      <td>2018-11-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>number_of_reviews</th>\n",
       "      <td>118</td>\n",
       "      <td>6</td>\n",
       "      <td>143</td>\n",
       "      <td>25</td>\n",
       "      <td>197</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>minimum_nights</th>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>62</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>price</th>\n",
       "      <td>60</td>\n",
       "      <td>17</td>\n",
       "      <td>90</td>\n",
       "      <td>26</td>\n",
       "      <td>42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>room_type</th>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>Private room</td>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>Private room</td>\n",
       "      <td>Private room</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>longitude</th>\n",
       "      <td>13.4026</td>\n",
       "      <td>13.4046</td>\n",
       "      <td>13.4176</td>\n",
       "      <td>13.3491</td>\n",
       "      <td>13.4151</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>latitude</th>\n",
       "      <td>52.5345</td>\n",
       "      <td>52.5485</td>\n",
       "      <td>52.535</td>\n",
       "      <td>52.4989</td>\n",
       "      <td>52.5432</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>neighbourhood</th>\n",
       "      <td>Brunnenstr. Süd</td>\n",
       "      <td>Prenzlauer Berg Nordwest</td>\n",
       "      <td>Prenzlauer Berg Südwest</td>\n",
       "      <td>Schöneberg-Nord</td>\n",
       "      <td>Helmholtzplatz</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>neighbourhood_group</th>\n",
       "      <td>Mitte</td>\n",
       "      <td>Pankow</td>\n",
       "      <td>Pankow</td>\n",
       "      <td>Tempelhof - Schöneberg</td>\n",
       "      <td>Pankow</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>host_id</th>\n",
       "      <td>2217</td>\n",
       "      <td>2986</td>\n",
       "      <td>3718</td>\n",
       "      <td>4108</td>\n",
       "      <td>17391</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>name</th>\n",
       "      <td>Berlin-Mitte Value! Quiet courtyard/very central</td>\n",
       "      <td>Prenzlauer Berg close to Mauerpark</td>\n",
       "      <td>Fabulous Flat in great Location</td>\n",
       "      <td>BerlinSpot Schöneberg near KaDeWe</td>\n",
       "      <td>BrightRoom with sunny greenview!</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>id</th>\n",
       "      <td>2015</td>\n",
       "      <td>2695</td>\n",
       "      <td>3176</td>\n",
       "      <td>3309</td>\n",
       "      <td>7071</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>price_group</th>\n",
       "      <td>normal</td>\n",
       "      <td>cheap</td>\n",
       "      <td>i am too poor</td>\n",
       "      <td>normal</td>\n",
       "      <td>normal</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                                               0  \\\n",
       "availability_365                                                             141   \n",
       "calculated_host_listings_count                                                 4   \n",
       "reviews_per_month                                                           3.76   \n",
       "last_review                                                           2018-10-28   \n",
       "number_of_reviews                                                            118   \n",
       "minimum_nights                                                                 4   \n",
       "price                                                                         60   \n",
       "room_type                                                        Entire home/apt   \n",
       "longitude                                                                13.4026   \n",
       "latitude                                                                 52.5345   \n",
       "neighbourhood                                                    Brunnenstr. Süd   \n",
       "neighbourhood_group                                                        Mitte   \n",
       "host_id                                                                     2217   \n",
       "name                            Berlin-Mitte Value! Quiet courtyard/very central   \n",
       "id                                                                          2015   \n",
       "price_group                                                               normal   \n",
       "\n",
       "                                                                 1  \\\n",
       "availability_365                                                 0   \n",
       "calculated_host_listings_count                                   1   \n",
       "reviews_per_month                                             1.42   \n",
       "last_review                                             2018-10-01   \n",
       "number_of_reviews                                                6   \n",
       "minimum_nights                                                   2   \n",
       "price                                                           17   \n",
       "room_type                                             Private room   \n",
       "longitude                                                  13.4046   \n",
       "latitude                                                   52.5485   \n",
       "neighbourhood                             Prenzlauer Berg Nordwest   \n",
       "neighbourhood_group                                         Pankow   \n",
       "host_id                                                       2986   \n",
       "name                            Prenzlauer Berg close to Mauerpark   \n",
       "id                                                            2695   \n",
       "price_group                                                  cheap   \n",
       "\n",
       "                                                              2  \\\n",
       "availability_365                                            220   \n",
       "calculated_host_listings_count                                1   \n",
       "reviews_per_month                                          1.25   \n",
       "last_review                                          2017-03-20   \n",
       "number_of_reviews                                           143   \n",
       "minimum_nights                                               62   \n",
       "price                                                        90   \n",
       "room_type                                       Entire home/apt   \n",
       "longitude                                               13.4176   \n",
       "latitude                                                 52.535   \n",
       "neighbourhood                           Prenzlauer Berg Südwest   \n",
       "neighbourhood_group                                      Pankow   \n",
       "host_id                                                    3718   \n",
       "name                            Fabulous Flat in great Location   \n",
       "id                                                         3176   \n",
       "price_group                                       i am too poor   \n",
       "\n",
       "                                                                3  \\\n",
       "availability_365                                              297   \n",
       "calculated_host_listings_count                                  1   \n",
       "reviews_per_month                                            0.39   \n",
       "last_review                                            2018-08-16   \n",
       "number_of_reviews                                              25   \n",
       "minimum_nights                                                  5   \n",
       "price                                                          26   \n",
       "room_type                                            Private room   \n",
       "longitude                                                 13.3491   \n",
       "latitude                                                  52.4989   \n",
       "neighbourhood                                     Schöneberg-Nord   \n",
       "neighbourhood_group                        Tempelhof - Schöneberg   \n",
       "host_id                                                      4108   \n",
       "name                            BerlinSpot Schöneberg near KaDeWe   \n",
       "id                                                           3309   \n",
       "price_group                                                normal   \n",
       "\n",
       "                                                               4  \n",
       "availability_365                                              26  \n",
       "calculated_host_listings_count                                 1  \n",
       "reviews_per_month                                           1.75  \n",
       "last_review                                           2018-11-04  \n",
       "number_of_reviews                                            197  \n",
       "minimum_nights                                                 2  \n",
       "price                                                         42  \n",
       "room_type                                           Private room  \n",
       "longitude                                                13.4151  \n",
       "latitude                                                 52.5432  \n",
       "neighbourhood                                     Helmholtzplatz  \n",
       "neighbourhood_group                                       Pankow  \n",
       "host_id                                                    17391  \n",
       "name                            BrightRoom with sunny greenview!  \n",
       "id                                                          7071  \n",
       "price_group                                               normal  "
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Trick 11\n",
    "listings_reverse['price_group'] = pd.cut(listings_reverse.price,\n",
    "                                         bins=[0, 20, 80, 120],\n",
    "                                         labels=['cheap', 'normal', 'i am too poor'])\n",
    "listings_reverse.head().T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>one</th>\n",
       "      <th>two</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>a</td>\n",
       "      <td>[1, 2]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>b</td>\n",
       "      <td>[2, 3]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>c</td>\n",
       "      <td>[4, 5]</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  one     two\n",
       "0   a  [1, 2]\n",
       "1   b  [2, 3]\n",
       "2   c  [4, 5]"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Trick 12\n",
    "tricky_df = pd.DataFrame({'one': ['a', 'b', 'c'], 'two': [[1, 2], [2, 3], [4, 5]]})\n",
    "tricky_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   0  1\n",
       "0  1  2\n",
       "1  2  3\n",
       "2  4  5"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tricky_df.two.apply(pd.Series)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>one</th>\n",
       "      <th>two</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>a</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>a</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>b</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>b</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>c</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>c</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  one two\n",
       "0   a   1\n",
       "0   a   2\n",
       "1   b   2\n",
       "1   b   3\n",
       "2   c   4\n",
       "2   c   5"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tricky_df.explode('two')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7098    -19.0\n",
       "18851    95.0\n",
       "12348    -9.0\n",
       "Name: price_diff, dtype: float64"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Trick 13\n",
    "listings_reverse['price_diff'] = listings_reverse.price.diff()\n",
    "listings_reverse['price_diff'].sample(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7742     1.00\n",
       "5899    -0.52\n",
       "13966    1.00\n",
       "Name: price_diff_percent, dtype: float64"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "listings_reverse['price_diff_percent'] = listings_reverse.price.pct_change()\n",
    "listings_reverse['price_diff_percent'].sample(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>id</th>\n",
       "      <td>2015</td>\n",
       "      <td>2015</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>name</th>\n",
       "      <td>Berlin-Mitte Value! Quiet courtyard/very central</td>\n",
       "      <td>Berlin-Mitte Value! Quiet courtyard/very central</td>\n",
       "      <td>Berlin-Mitte Value! Quiet courtyard/very central</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>host_id</th>\n",
       "      <td>2217</td>\n",
       "      <td>2217</td>\n",
       "      <td>2217</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>neighbourhood_group</th>\n",
       "      <td>Mitte</td>\n",
       "      <td>Mitte</td>\n",
       "      <td>Mitte</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>neighbourhood</th>\n",
       "      <td>Brunnenstr. Süd</td>\n",
       "      <td>Brunnenstr. Süd</td>\n",
       "      <td>Brunnenstr. Süd</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>latitude</th>\n",
       "      <td>52.5345</td>\n",
       "      <td>52.5345</td>\n",
       "      <td>52.5345</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>longitude</th>\n",
       "      <td>13.4026</td>\n",
       "      <td>13.4026</td>\n",
       "      <td>13.4026</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>room_type</th>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>Entire home/apt</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>price</th>\n",
       "      <td>60</td>\n",
       "      <td>60</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>minimum_nights</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>number_of_reviews</th>\n",
       "      <td>118</td>\n",
       "      <td>118</td>\n",
       "      <td>118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>last_review</th>\n",
       "      <td>2018-10-28</td>\n",
       "      <td>2018-10-28</td>\n",
       "      <td>2018-10-28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>reviews_per_month</th>\n",
       "      <td>3.76</td>\n",
       "      <td>3.76</td>\n",
       "      <td>3.76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>calculated_host_listings_count</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>availability_365</th>\n",
       "      <td>141</td>\n",
       "      <td>141</td>\n",
       "      <td>141</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <td>2016-04-11 00:00:00</td>\n",
       "      <td>2016-04-15 00:00:00</td>\n",
       "      <td>2016-04-26 00:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>_merge</th>\n",
       "      <td>both</td>\n",
       "      <td>both</td>\n",
       "      <td>both</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                                               0  \\\n",
       "id                                                                          2015   \n",
       "name                            Berlin-Mitte Value! Quiet courtyard/very central   \n",
       "host_id                                                                     2217   \n",
       "neighbourhood_group                                                        Mitte   \n",
       "neighbourhood                                                    Brunnenstr. Süd   \n",
       "latitude                                                                 52.5345   \n",
       "longitude                                                                13.4026   \n",
       "room_type                                                        Entire home/apt   \n",
       "price                                                                         60   \n",
       "minimum_nights                                                                 4   \n",
       "number_of_reviews                                                            118   \n",
       "last_review                                                           2018-10-28   \n",
       "reviews_per_month                                                           3.76   \n",
       "calculated_host_listings_count                                                 4   \n",
       "availability_365                                                             141   \n",
       "date                                                         2016-04-11 00:00:00   \n",
       "_merge                                                                      both   \n",
       "\n",
       "                                                                               1  \\\n",
       "id                                                                          2015   \n",
       "name                            Berlin-Mitte Value! Quiet courtyard/very central   \n",
       "host_id                                                                     2217   \n",
       "neighbourhood_group                                                        Mitte   \n",
       "neighbourhood                                                    Brunnenstr. Süd   \n",
       "latitude                                                                 52.5345   \n",
       "longitude                                                                13.4026   \n",
       "room_type                                                        Entire home/apt   \n",
       "price                                                                         60   \n",
       "minimum_nights                                                                 4   \n",
       "number_of_reviews                                                            118   \n",
       "last_review                                                           2018-10-28   \n",
       "reviews_per_month                                                           3.76   \n",
       "calculated_host_listings_count                                                 4   \n",
       "availability_365                                                             141   \n",
       "date                                                         2016-04-15 00:00:00   \n",
       "_merge                                                                      both   \n",
       "\n",
       "                                                                               2  \n",
       "id                                                                          2015  \n",
       "name                            Berlin-Mitte Value! Quiet courtyard/very central  \n",
       "host_id                                                                     2217  \n",
       "neighbourhood_group                                                        Mitte  \n",
       "neighbourhood                                                    Brunnenstr. Süd  \n",
       "latitude                                                                 52.5345  \n",
       "longitude                                                                13.4026  \n",
       "room_type                                                        Entire home/apt  \n",
       "price                                                                         60  \n",
       "minimum_nights                                                                 4  \n",
       "number_of_reviews                                                            118  \n",
       "last_review                                                           2018-10-28  \n",
       "reviews_per_month                                                           3.76  \n",
       "calculated_host_listings_count                                                 4  \n",
       "availability_365                                                             141  \n",
       "date                                                         2016-04-26 00:00:00  \n",
       "_merge                                                                      both  "
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Trick 14\n",
    "ind_df = listings_df.merge(reviews_df,\n",
    "                           on='id',\n",
    "                           indicator = True)\n",
    "ind_df.head(3).T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>2</th>\n",
       "      <th>5</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>id</th>\n",
       "      <td>2015</td>\n",
       "      <td>3176</td>\n",
       "      <td>9991</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>name</th>\n",
       "      <td>Berlin-Mitte Value! Quiet courtyard/very central</td>\n",
       "      <td>Fabulous Flat in great Location</td>\n",
       "      <td>Geourgeous flat - outstanding views</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>host_id</th>\n",
       "      <td>2217</td>\n",
       "      <td>3718</td>\n",
       "      <td>33852</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>neighbourhood_group</th>\n",
       "      <td>Mitte</td>\n",
       "      <td>Pankow</td>\n",
       "      <td>Pankow</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>neighbourhood</th>\n",
       "      <td>Brunnenstr. Süd</td>\n",
       "      <td>Prenzlauer Berg Südwest</td>\n",
       "      <td>Prenzlauer Berg Südwest</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>latitude</th>\n",
       "      <td>52.5345</td>\n",
       "      <td>52.535</td>\n",
       "      <td>52.533</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>longitude</th>\n",
       "      <td>13.4026</td>\n",
       "      <td>13.4176</td>\n",
       "      <td>13.416</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>room_type</th>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>Entire home/apt</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>price</th>\n",
       "      <td>60</td>\n",
       "      <td>90</td>\n",
       "      <td>180</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>minimum_nights</th>\n",
       "      <td>4</td>\n",
       "      <td>62</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>number_of_reviews</th>\n",
       "      <td>118</td>\n",
       "      <td>143</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>last_review</th>\n",
       "      <td>2018-10-28</td>\n",
       "      <td>2017-03-20</td>\n",
       "      <td>2018-07-23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>reviews_per_month</th>\n",
       "      <td>3.76</td>\n",
       "      <td>1.25</td>\n",
       "      <td>0.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>calculated_host_listings_count</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>availability_365</th>\n",
       "      <td>141</td>\n",
       "      <td>220</td>\n",
       "      <td>137</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                                               0  \\\n",
       "id                                                                          2015   \n",
       "name                            Berlin-Mitte Value! Quiet courtyard/very central   \n",
       "host_id                                                                     2217   \n",
       "neighbourhood_group                                                        Mitte   \n",
       "neighbourhood                                                    Brunnenstr. Süd   \n",
       "latitude                                                                 52.5345   \n",
       "longitude                                                                13.4026   \n",
       "room_type                                                        Entire home/apt   \n",
       "price                                                                         60   \n",
       "minimum_nights                                                                 4   \n",
       "number_of_reviews                                                            118   \n",
       "last_review                                                           2018-10-28   \n",
       "reviews_per_month                                                           3.76   \n",
       "calculated_host_listings_count                                                 4   \n",
       "availability_365                                                             141   \n",
       "\n",
       "                                                              2  \\\n",
       "id                                                         3176   \n",
       "name                            Fabulous Flat in great Location   \n",
       "host_id                                                    3718   \n",
       "neighbourhood_group                                      Pankow   \n",
       "neighbourhood                           Prenzlauer Berg Südwest   \n",
       "latitude                                                 52.535   \n",
       "longitude                                               13.4176   \n",
       "room_type                                       Entire home/apt   \n",
       "price                                                        90   \n",
       "minimum_nights                                               62   \n",
       "number_of_reviews                                           143   \n",
       "last_review                                          2017-03-20   \n",
       "reviews_per_month                                          1.25   \n",
       "calculated_host_listings_count                                1   \n",
       "availability_365                                            220   \n",
       "\n",
       "                                                                  5  \n",
       "id                                                             9991  \n",
       "name                            Geourgeous flat - outstanding views  \n",
       "host_id                                                       33852  \n",
       "neighbourhood_group                                          Pankow  \n",
       "neighbourhood                               Prenzlauer Berg Südwest  \n",
       "latitude                                                     52.533  \n",
       "longitude                                                    13.416  \n",
       "room_type                                           Entire home/apt  \n",
       "price                                                           180  \n",
       "minimum_nights                                                    6  \n",
       "number_of_reviews                                                 6  \n",
       "last_review                                              2018-07-23  \n",
       "reviews_per_month                                              0.15  \n",
       "calculated_host_listings_count                                    1  \n",
       "availability_365                                                137  "
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Trick 15\n",
    "grouped = listings_df.groupby('room_type')\n",
    "grouped.get_group('Entire home/apt').head(3).T"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Further reading\n",
    "\n",
    "1. https://realpython.com/pandas-settingwithcopywarning/\n",
    "2. https://spark.apache.org/docs/2.4.0/sql-pyspark-pandas-with-arrow.html\n",
    "3. https://www.oreilly.com/library/view/python-data-science/9781491912126/\n",
    "4. https://pandas.pydata.org/pandas-docs/dev/user_guide/enhancingperf.html"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
